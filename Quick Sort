#include <iostream>
#include <chrono>
#include <algorithm>
using namespace std;
using namespace chrono;

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high]; 
    int i = (low - 1); 

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++; 
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

void fillRandom(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 10000;
    }
}

void fillReverseSorted(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = size - i;
    }
}

void fillSorted(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = i + 1;
    }
}

int main() {
    const int n = 10; // n=10, n=100, n=500, n=1000, n=10000
    int arr[n];
    int arrCopy[n];

    fillRandom(arr, n);
    cout << "Data Acak: ";
    // cout << "Data Berurut Terbalik: ";
    // cout << "Data Terurut: ";
    printArray(arr, n);

    copy(arr, arr + n, arrCopy);
    auto start = high_resolution_clock::now();
    quickSort(arrCopy, 0, n - 1);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken by Quick Sort: " << duration.count() << " microseconds" << endl;

    return 0;
}
